diff -Naur Games-Chess-0.002/Chess.pm Games-Chess-0.002.patch/Chess.pm
--- Games-Chess-0.002/Chess.pm	Mon Nov 30 07:16:42 1998
+++ Games-Chess-0.002.patch/Chess.pm	Mon Apr 26 11:04:02 1999
@@ -284,7 +284,7 @@
   return unless xy_valid($x,$y);
   return Games::Chess::Piece->new(vec($self->{board}, 8 * $x + $y, 8))
     unless @piece;
-  my $p = Games::Piece->new(@piece);
+  my $p = Games::Chess::Piece->new(@piece);
   return unless defined $p;
   vec($self->{board}, 8 * $x + $y, 8) = ord($$p);
   return 1;
@@ -296,9 +296,19 @@
 }
 
 sub can_castle {
-  my ($self,$piece,$can_castle) = @_;
-  $piece =~ /^[KQkq]$/ or return
-    error("can_castle($piece) invalid: must be KQkq");
+  my ($self,$colour,$piece,$can_castle) = @_;
+  if    ($piece == &QUEEN) { $piece = 'q'; }
+  elsif ($piece == &KING)  { $piece = 'k'; }
+  else {
+    return error("can_castle($colour, $piece) invalid: piece must be KING ("
+      . &KING . ") or QUEEN (" . &QUEEN . ")");
+  }
+  if    ($colour == &WHITE) { $piece =~ tr/a-z/A-Z/; }
+  elsif ($colour == &BLACK) { } # Do nothing.
+  else {
+    return error("can_castle($colour, $piece) invalid: colour must be WHITE ("
+      . &WHITE . ") or BLACK (" . &BLACK . ")");
+  }
   return defined $self->{'can_castle'}{$piece} unless defined $can_castle;
   if ($can_castle) {
     $self->{'can_castle'}{$piece} = 1;
@@ -405,9 +415,13 @@
 		'Q' => { 'e1' => 'K', 'a1' => 'R' },
 		'k' => { 'e8' => 'k', 'h8' => 'r' },
 		'q' => { 'e8' => 'k', 'a8' => 'r' } );
+  my %map = ( 'K' => [ &WHITE, &KING ],
+		'Q' => [ &WHITE, &QUEEN ],
+		'k' => [ &BLACK, &KING  ],
+		'q' => [ &BLACK, &QUEEN ] );
   foreach my $castle (keys %tests) {
     my $p = Games::Chess::Piece->new($castle);
-    if ($self->can_castle($castle)) {
+    if ($self->can_castle(@{$map{$castle}})) {
       foreach my $sq (keys %{$tests{$castle}}) {
 	my $colour = $p->colour_name;
 	my $side = $p->piece_name;
diff -Naur Games-Chess-0.002/Chess.pod Games-Chess-0.002.patch/Chess.pod
--- Games-Chess-0.002/Chess.pod	Sun Nov 29 19:56:59 1998
+++ Games-Chess-0.002.patch/Chess.pod	Mon Apr 26 11:04:02 1999
@@ -349,12 +349,12 @@
 If ($x,$y) is a valid board position, set the en passant target square
 to ($x,$y) and return 1.  Return undefined otherwise.
 
-=item Position-E<gt>halfmove
+=item Position-E<gt>halfmove_clock
 
 Return the halfmove clock (the number of ply since the last pawn move or
 capture).
 
-=item Position-E<gt>halfmove($halfmove)
+=item Position-E<gt>halfmove_clock($halfmove)
 
 If $halfmove is a valid halfmove clock value, set the halfmove clock to
 $halfmove and return 1.  Return undefined otherwise.
